library(ggthemes)
library(extrafont)
library(plyr)
load("~/Documents/PhD/WD_reference_data/ref_data.RData")
View(domain_use)
domain_use <- as.data.frame(table(references_urls$ref_domain))
View(domain_use)
View(references_no_bots)
references_no_bots$ref_value[21]
references_no_bots$ref_value[1713]
references_no_bots$ref_value[1710]
load("~/Documents/PhD/.RData")
cor(clean_tld$citeTld_pc, clean_tld$refTld_pc, method = 'spearman')
cor(clean_tld$citeTld_pc, clean_tld$refTld_pc, method = 'pearson')
clean_tld$WP_ranks <- rank(clean_tld$citeTld)
View(clean_tld)
clean_tld$WD_ranks <- rank(clean_tld$refTld)
cor(clean_tld$WP_ranks, clean_tld$WD_ranks, method = 'pearson')
cor(clean_tld$WP_ranks, clean_tld$WD_ranks, method = 'spearman')
cv
cv_function  <- function(x){
cv = sd(x)/mean(x)
}
cv_function(clean_tld$citeTld)
cv_function()
cv <- cv_function(clean_tld$citeTld)
cv <- cv_function(clean_tld$refTld)
cor(clean_tld$WP_ranks, clean_tld$WD_ranks, method = 'spearman')
cor(clean_tld$WP_ranks, clean_tld$WD_ranks, method = 'pearson')
cor(clean_tld$citeTld, clean_tld$refTld, method = 'pearson')
cv_wp <- cv_function(clean_tld$citeTld)
require(ineq)
ineq(clean_tld$citeTld,type="Gini")
ineq(clean_tld$refTld,type="Gini")
wd_100 <- clean_tld$refTld[order(-clean_tld$refTld)]
wd_100 <- wd_100[1:100,]
wd_100 <- wd_100[(1:100),]
wd_100 <- wd_100[(1:100)]
wd_100 <- clean_tld[order(-clean_tld$refTld), c(1,3) ]
wd_100 <- wd_100[(1:100),]
wd_100 <- clean_tld[order(-clean_tld$refTld), c(1,3) ]
wd_100 <- wd_100[1:100,]
wd_100 <- merge(wd_100, clean_tld[,c(1,2)], by = 'index')
View(wd_100)
cor(wd_100$refTld, wd_100$citeTld)
wd_100 <- clean_tld[order(-clean_tld$refTld), c(1,3,7) ]
wd_100 <- wd_100[1:100,]
wd_100 <- merge(wd_100, clean_tld[,c(1,2,6)], by = 'index')
cor(wd_100$WD_ranks, wd_100$WP_ranks)
ineq(clean_tld$citeTld,type="Gini")
ineq(clean_tld$refTld,type="Gini")
cv_wp <- cv_function(clean_tld$citeTld)
cv_wd <- cv_function(clean_tld$refTld)
wd_100 <- clean_tld[order(-clean_tld$refTld), c(1,3,7) ]
wd_100 <- wd_100[1:10,]
wd_100 <- merge(wd_100, clean_tld[,c(1,2,6)], by = 'index')
cor(wd_100$WD_ranks, wd_100$WP_ranks)
clean_tld <- clean_tld[which(clean_tld$refTld > 0),]
cor(clean_tld$citeTld, clean_tld$refTld, method = 'pearson')
wd_10 <- clean_tld[order(-clean_tld$refTld), c(1,3,7) ]
wd_10 <- wd_10[1:10,]
wd_10 <- merge(wd_10, clean_tld[,c(1,2,6)], by = 'index')
cor(wd_10$WD_ranks, wd_10$WP_ranks)
wd_100 <- clean_tld[order(-clean_tld$refTld), c(1,3,7) ]
wd_100 <- wd_100[1:10,]
wd_100 <- merge(wd_100, clean_tld[,c(1,2,6)], by = 'index')
cor(wd_100$WD_ranks, wd_100$WP_ranks)
cor(clean_tld$WD_ranks, clean_tld$WP_ranks)
cor(wd_100$WD_ranks, wd_100$WP_ranks, method = 'spearman')
cor(clean_tld$WD_ranks, clean_tld$WP_ranks, , method = 'spearman')
cor(wd_10$WD_ranks, wd_10$WP_ranks, method = 'spearman')
cv_wp <- cv_function(clean_tld$citeTld)
cv_wd <- cv_function(clean_tld$refTld)
p <- plot_ly(
x = log(clean_tld$citeTld), y = log(clean_tld$refTld), type = 'scatter',
# Hover text:
text = clean_tld$index#~paste("Price: ", price, '$<br>Cut:', cut),
)%>%
layout(title = 'Top-level domains in Wikipedia and Wikidata external references (log)',
xaxis = list(title = "Wikipedia citations"),
yaxis = list(title = "Wikidata references"),
margin = list(b = 100))
p <- plot_ly(
x = log(clean_tld$citeTld), y = log(clean_tld$refTld), type = 'scatter',
# Hover text:
text = clean_tld$index#~paste("Price: ", price, '$<br>Cut:', cut),
)%>%
layout(title = 'Top-level domains in Wikipedia and Wikidata external references (log)',
xaxis = list(title = "Wikipedia citations"),
yaxis = list(title = "Wikidata references"),
margin = list(b = 100))
p <- plot_ly(
x = log(clean_tld$citeTld), y = log(clean_tld$refTld), type = 'scatter',
# Hover text:
text = clean_tld$index#~paste("Price: ", price, '$<br>Cut:', cut),
)
library(plotly)
p <- plot_ly(
x = log(clean_tld$citeTld), y = log(clean_tld$refTld), type = 'scatter',
# Hover text:
text = clean_tld$index#~paste("Price: ", price, '$<br>Cut:', cut),
)%>%
layout(title = 'Top-level domains in Wikipedia and Wikidata external references (log)',
xaxis = list(title = "Wikipedia citations"),
yaxis = list(title = "Wikidata references"),
margin = list(b = 100))
p
clean_tld <- clean_tld[which(clean_tld$refTld > 0),]
View(clean_tld)
c <- plot_ly(
x = clean_tld$citeTld, y = clean_tld$refTld, type = 'scatter',
# Hover text:
text = clean_tld$index#~paste("Price: ", price, '$<br>Cut:', cut),
)%>%
layout(title = 'Top-level domains in Wikipedia and Wikidata external references (log)',
xaxis = list(title = "Wikipedia citations"),
yaxis = list(title = "Wikidata references"),
margin = list(b = 100))
c
p <- plot_ly(
x = log(clean_tld$citeTld), y = log(clean_tld$refTld), type = 'scatter',
# Hover text:
text = clean_tld$index#~paste("Price: ", price, '$<br>Cut:', cut),
)%>%
layout(title = 'Top-level domains in Wikipedia and Wikidata external references (log)',
xaxis = list(title = "Wikipedia citations"),
yaxis = list(title = "Wikidata references"))
p
wilcox.test(clean_tld$citeTld,clean_tld$refTld,paired=TRUE)
wilcox.test(clean_tld$citeTld,clean_tld$refTld)
sm.density.compare(clean_tld$citeTld, clean_tld$refTld)
library(sm)
install.packages("sm")
library(sm)
sm.density.compare(clean_tld$citeTld, clean_tld$refTld)
sm.density.compare(clean_tld$citeTld, clean_tld$refTld)
d <- density(clean_tld$citeTld)
plot(d)
d <- density(clean_tld$refTld)
plot(d)
sm.density.compare(log(clean_tld$citeTld), log(clean_tld$refTld))
d <- density(log(clean_tld$citeTld))
plot(d)
d <- density(log(clean_tld$refTld))
plot(d)
tld_extract <- function(x) {
host <- parse_url(x)
host_clean <- tldextract(host$hostname)
host_domain <- host_clean$tld
}
matching_tld <- read.csv('Documents/PhD/Wikidata-Referencing/datasets/matching_tld.csv', stringsAsFactors = F)
aggr_matchtld <- aggregate(count ~ matchTld, data = matching_tld, FUN = sum)
matching_tld$index <-   sub(".*\\.", "", matching_tld$matchTld)
aggr_matchtld <- aggregate(count ~ index, data = matching_tld, FUN = sum)
all_tld <- merge(clean_tld, aggr_matchtld, by = 'index', all.x =  T)
View(all_tld)
matching_tld <- read.csv('Documents/PhD/wikidata_scripts/matching_domains.csv', stringsAsFactors = F)
matching_tld$index <-   sub(".*\\.", "", matching_tld$refTld)
aggr_matchtld <- as.data.frame(table(matching_tld$index))
View(aggr_matchtld)
View(aggr_reftld)
View(aggr_matchtld)
View(all_tld)
aggr_matchtld <- aggr_matchtld[!(aggr_matchtld$Var1 == ''),]
colnames(aggr_matchtld) <- c('index', 'matchTld')
all_tld <- merge(clean_tld, aggr_matchtld, by = 'index', all.x =  T)
p <- plot_ly(
x = log(all_tld$citeTld), y = log(all_tld$refTld), colour = log(all_tld$matchTld) type = 'scatter',
# Hover text:
text = clean_tld$index#~paste("Price: ", price, '$<br>Cut:', cut),
)%>%
layout(title = 'Top-level domains in Wikipedia and Wikidata external references (log)',
xaxis = list(title = "Wikipedia citations"),
yaxis = list(title = "Wikidata references"))
p <- plot_ly(
x = log(all_tld$citeTld), y = log(all_tld$refTld), colour = log(all_tld$matchTld), type = 'scatter',
# Hover text:
text = clean_tld$index#~paste("Price: ", price, '$<br>Cut:', cut),
)%>%
layout(title = 'Top-level domains in Wikipedia and Wikidata external references (log)',
xaxis = list(title = "Wikipedia citations"),
yaxis = list(title = "Wikidata references"))
p
p <- plot_ly(
x = log(all_tld$citeTld), y = log(all_tld$refTld), color = log(all_tld$matchTld), type = 'scatter',
# Hover text:
text = clean_tld$index#~paste("Price: ", price, '$<br>Cut:', cut),
)%>%
layout(title = 'Top-level domains in Wikipedia and Wikidata external references (log)',
xaxis = list(title = "Wikipedia citations"),
yaxis = list(title = "Wikidata references"))
p
chart_link = plotly_POST(p, sharing = 'public' )
p <- plot_ly(
x = log(all_tld$citeTld), y = log(all_tld$refTld), color = log(all_tld$matchTld), type = 'scatter',
# Hover text:
text = ~paste(clean_tld$index, ",", "Wikipedia: ", all_tld$citeTld, 'Wikidata:', all_tld$refTld),
)%>%
layout(title = 'Top-level domains in Wikipedia and Wikidata external references (log)',
xaxis = list(title = "Wikipedia citations"),
yaxis = list(title = "Wikidata references"))
p
chart_link = plotly_POST(p, sharing = 'public' )
chart_link
chart_link = plotly_POST(p, sharing = 'public' )
Sys.setenv("plotly_username" = "aliopiscopo")
Sys.setenv("plotly_api_key" = "V3fRS21xtjBjJsc59Aw9")
chart_link = plotly_POST(p, sharing = 'public' )
Sys.setenv("plotly_username" = "aliopiscopo")
Sys.setenv("plotly_api_key" = "V3fRS21xtjBjJsc59Aw9")
chart_link = plotly_POST(p, sharing = 'public' )
chart_link = plotly_POST(p, sharing = 'public' )
chart_link = plotly_POST(p, sharing = 'public' )
cor(clean_tld$WD_ranks, clean_tld$WP_ranks, , method = 'spearman')
View(wd_100)
wd_100 <- clean_tld[order(-clean_tld$refTld), c(1,3,7) ]
wd_100 <- wd_100[1:100,]
wd_100 <- merge(wd_100, clean_tld[,c(1,2,6)], by = 'index')
View(wd_100)
View(clean_tld)
c <- plot_ly(
x = clean_tld$citeTld_pc, y = clean_tld$refTld_pc, type = 'scatter',
# Hover text:
text = clean_tld$index#~paste("Price: ", price, '$<br>Cut:', cut),
)%>%
layout(title = 'Top-level domains in Wikipedia and Wikidata external references (percentage)',
xaxis = list(title = "Wikipedia citations"),
yaxis = list(title = "Wikidata references"),
margin = list(b = 100))
c
ineq(clean_tld$citeTld,type="Gini")
ineq(clean_tld$refTld,type="Gini")
ineq(clean_tld$citeTld_pc,type="Gini")
ineq(clean_tld$refTld_pc,type="Gini")
p <- plot_ly(
x = log(all_tld$citeTld_pc), y = log(all_tld$refTld_pc), color = log(all_tld$matchTld), type = 'scatter',
# Hover text:
text = ~paste(clean_tld$index, ",", "Wikipedia: ", all_tld$citeTld, 'Wikidata:', all_tld$refTld),
)%>%
layout(title = 'Top-level domains in Wikipedia and Wikidata external references (log)',
xaxis = list(title = "Wikipedia citations"),
yaxis = list(title = "Wikidata references"))
p
wd_100 <- clean_tld[order(-clean_tld$refTld), c(1,3,5,7) ]
wd_100 <- wd_100[1:100,]
wd_100 <- merge(wd_100, clean_tld[,c(1,2,4,6)], by = 'index')
View(wd_100)
wd_10 <- clean_tld[order(-clean_tld$refTld), c(1,3,7) ]
wd_10 <- wd_10[1:10,]
wd_10 <- clean_tld[order(-clean_tld$refTld), c(1,3,5,7) ]
wd_10 <- clean_tld[order(-clean_tld$refTld), c(1,3,5,7) ]
wd_10 <- wd_10[1:10,]
wd_10 <- merge(wd_10, clean_tld[,c(1,2,4,6)], by = 'index')
sum(wd_10$refTld_pc)
sum(wd_10$citeTld_pc)
ineq(wd_10$refTld_pc,type="Gini")
clean_tld$citeTld_pc[order(-clean_tld$citeTld_pc) ]
wp_10 <- clean_tld$citeTld_pc[order(-clean_tld$citeTld_pc) ]
wp_10 <- wp_10[1:10,]
wp_10 <- wp_10[1:10]
ineq(wp_10,type="Gini")
ineq(wd_10$refTld_pc,type="Gini")
wp_10
wd_10$refTld_pc
cv_wp <- cv_function(wd_10$refTld_pc)
cv_wd <- cv_function(wp_10)
ks.test(all_tld$citeTld, all_tld$refTld)
wp_tld <- read.csv('Wikidata-Referencing/datasets/wp_used_tld.csv', stringsAsFactors = F)
wp_tld$citeTld_pc <- (wp_tld$citeTld / sum(wp_tld$citeTld)) *100
wd_tld <- read.csv('Wikidata-Referencing/datasets/wd_used_tld.csv', stringsAsFactors = F)
wd_tld$refTld_pc <- (wd_tld$refTld / sum(wd_tld$refTld)) *100
tld_list <- read.csv('tld_list.csv', sep ='\t', stringsAsFactors = F)
all_tld <- merge(wp_tld, wd_tld, by ='index', all.x= T)
all_tld$refTld[is.na(all_tld$refTld)] <- 0
clean_tld <- all_tld
clean_tld$index <-   sub(".*\\.", "", clean_tld$index)
aggr_citetld <- aggregate(citeTld ~ index, data = clean_tld, FUN = sum)
aggr_reftld <- aggregate(refTld ~ index, data = clean_tld, FUN = sum)
ks.test(aggr_citetld$citeTld, aggr_reftld$refTld)
wilcox.test(aggr_citetld$citeTld, aggr_reftld$refTld, paired = T)
median(aggr_citetld$citeTld)
median(aggr_reftld$refTld)
median(all_tld$refTld_pc)
median(all_tld$citeTld_pc)
mean(all_tld$citeTld_pc)
mean(all_tld$refTld_pc)
all_tld$refTld[is.na(all_tld$refTld)] <- 0
median(aggr_reftld$refTld)
median(aggr_citetld$citeTld)
clean_tld <- merge(aggr_citetld, aggr_reftld, by = 'index')
clean_tld <- clean_tld[which(clean_tld$index != ''),]
clean_tld$citeTld_pc <- (clean_tld$citeTld / sum(clean_tld$citeTld)) * 100
clean_tld$refTld_pc <- (clean_tld$refTld / sum(clean_tld$refTld)) * 100
View(clean_tld)
sum(clean_tld$citeTld_pc[1:10])
wp_10 <- clean_tld[order(-clean_tld$citeTld_pc),]
wp_10 <- wp_10[1:10,]
sum(wp_10$citeTld_pc)
wd_10 <- clean_tld[order(-clean_tld$refTld_pc),]
wd_10 <- wd_10[1:10,]
sum(wd_10$refTld_pc)
p <- plot_ly(
x = log(all_tld$citeTld_pc), y = log(all_tld$refTld_pc), color = log(all_tld$matchTld), type = 'scatter',
# Hover text:
text = ~paste(clean_tld$index, ",", "Wikipedia: ",(all_tld$citeTld_pc*100), 'Wikidata:', (all_tld$refTld*100)),
)%>%
layout(title = 'Top-level domains in Wikipedia and Wikidata external references (log)',
xaxis = list(title = "Wikipedia citations"),
yaxis = list(title = "Wikidata references"))
p <- plot_ly(
x = log(all_tld$citeTld_pc), y = log(all_tld$refTld_pc), color = log(all_tld$matchTld), type = 'scatter',
# Hover text:
text = ~paste(clean_tld$index, ",", "Wikipedia: ",(all_tld$citeTld_pc*100), 'Wikidata:', (all_tld$refTld_pc*100)),
)%>%
layout(title = 'Top-level domains in Wikipedia and Wikidata external references (log)',
xaxis = list(title = "Wikipedia citations"),
yaxis = list(title = "Wikidata references"))
ks.test(clean_tld$citeTld)
sum(clean_tld$citeTld_pc[grep('uk|com|co|org|edu|ac|mil|au|ca|int|net')])
sum(clean_tld$citeTld_pc[grep('uk|com|co|org|edu|ac|mil|au|ca|int|net', clean_tld$index, ignore.case = T)])
sum(clean_tld$refTld_pc[grep('uk|com|co|org|edu|ac|mil|au|ca|int|net', clean_tld$index, ignore.case = T)])
p
p <- plot_ly(
x = log(all_tld$citeTld_pc), y = log(all_tld$refTld_pc), color = all_tld$matchTld, type = 'scatter',
# Hover text:
text = ~paste(clean_tld$index, ",", "Wikipedia: ",(all_tld$citeTld_pc*100), 'Wikidata:', (all_tld$refTld_pc*100)),
)%>%
layout(title = 'Top-level domains in Wikipedia and Wikidata external references (log)',
xaxis = list(title = "Wikipedia citations"),
yaxis = list(title = "Wikidata references"))
p
p <- plot_ly(
x = log(all_tld$citeTld), y = log(all_tld$refTld), color = all_tld$matchTld, type = 'scatter',
# Hover text:
text = ~paste(clean_tld$index, ",", "Wikipedia: ",(all_tld$citeTld_pc*100), 'Wikidata:', (all_tld$refTld_pc*100)),
)%>%
layout(title = 'Top-level domains in Wikipedia and Wikidata external references (log)',
xaxis = list(title = "Wikipedia citations"),
yaxis = list(title = "Wikidata references"))
p
matching_tld <- read.csv('Documents/PhD/wikidata_scripts/matching_domains.csv', stringsAsFactors = F)
matching_tld$index <-   sub(".*\\.", "", matching_tld$refTld)
aggr_matchtld <- as.data.frame(table(matching_tld$index))
aggr_matchtld <- aggr_matchtld[!(aggr_matchtld$Var1 == ''),]
colnames(aggr_matchtld) <- c('index', 'matchTld')
p <- plot_ly(
x = log(all_tld$citeTld), y = log(all_tld$refTld), color = all_tld$matchTld, type = 'scatter',
# Hover text:
text = ~paste(clean_tld$index, ",", "Wikipedia: ",(all_tld$citeTld_pc*100), 'Wikidata:', (all_tld$refTld_pc*100)),
)%>%
layout(title = 'Top-level domains in Wikipedia and Wikidata external references (log)',
xaxis = list(title = "Wikipedia citations"),
yaxis = list(title = "Wikidata references"))
p
all_tld <- merge(clean_tld, aggr_matchtld, by = 'index', all.x =  T)
p <- plot_ly(
x = log(all_tld$citeTld), y = log(all_tld$refTld), color = all_tld$matchTld, type = 'scatter',
# Hover text:
text = ~paste(clean_tld$index, ",", "Wikipedia: ",(all_tld$citeTld_pc*100), 'Wikidata:', (all_tld$refTld_pc*100)),
)%>%
layout(title = 'Top-level domains in Wikipedia and Wikidata external references (log)',
xaxis = list(title = "Wikipedia citations"),
yaxis = list(title = "Wikidata references"))
p
p <- plot_ly(
x = log(all_tld$citeTld), y = log(all_tld$refTld), color = all_tld$matchTld, type = 'scatter',
# Hover text:
text = ~paste(clean_tld$index, ",", "Wikipedia: ",all_tld$citeTld_pc, 'Wikidata:', all_tld$refTld_pc),
)%>%
layout(title = 'Top-level domains in Wikipedia and Wikidata external references (log)',
xaxis = list(title = "Wikipedia citations"),
yaxis = list(title = "Wikidata references"))
p <- plot_ly(
x = log(all_tld$citeTld), y = log(all_tld$refTld), color = log(all_tld$matchTld), type = 'scatter',
# Hover text:
text = ~paste(clean_tld$index, ",", "Wikipedia: ",all_tld$citeTld_pc, 'Wikidata:', all_tld$refTld_pc),
)%>%
layout(title = 'Top-level domains in Wikipedia and Wikidata external references (log)',
xaxis = list(title = "Wikipedia citations"),
yaxis = list(title = "Wikidata references"))
p
p <- plot_ly(
x = log(all_tld$citeTld), y = log(all_tld$refTld), color = log(all_tld$matchTld), type = 'scatter',
# Hover text:
text = ~paste(clean_tld$index, ",", "Wikipedia: ",all_tld$citeTld_pc, '%; Wikidata:', all_tld$refTld_pc, '%.'),
)%>%
layout(title = 'Top-level domains in Wikipedia and Wikidata external references (log)',
xaxis = list(title = "Wikipedia citations"),
yaxis = list(title = "Wikidata references"))
p
p <- plot_ly(
x = log(all_tld$citeTld), y = log(all_tld$refTld), color = log(all_tld$matchTld), type = 'scatter',
# Hover text:
text = ~paste(clean_tld$index, ",", "Wikipedia: ",all_tld$citeTld_pc, '%; Wikidata:', all_tld$refTld_pc, '%.'),
)%>%
layout(title = 'Top-level domains in Wikipedia and Wikidata external references (log), hovering on dots shows percentage of occurrences.',
xaxis = list(title = "Wikipedia citations"),
yaxis = list(title = "Wikidata references"))
p
chart_link = plotly_POST(p, sharing = 'public' )
chart_link
Sys.setenv("plotly_username" = "aliopiscopo")
Sys.setenv("plotly_api_key" = "V3fRS21xtjBjJsc59Aw9")
chart_link = plotly_POST(p, sharing = 'public' )
library(caret)
library(PerformanceAnalytics)
library(plyr)
library(dplyr)
library(stringi)
library(chron)
library(zoo)
library(ggplot2)
library(scales)
library(RColorBrewer)
library(methods)
library(grid)
library(gridExtra)
library(doBy)
library(reshape2)
library(vegan)
library(data.table)
library(taRifx)
setwd("/Volumes/LaCie/")
#kd_data_big <- read.csv('intro_files_2/kd_data_big_bis.csv', stringsAsFactors = F)
#kd_data_small <- read.csv('intro_files_2/kd_data_small_bis.csv', stringsAsFactors = F)
kd_data_all <- read.csv('intro_files/kd_last_all_0701.csv', stringsAsFactors = F)
kd_data_human <- kd_data_all[which(kd_data_all$user_type == 'human'),]
View(kd_data_human)
View(kd_data_human)
install.packages("dcGOR")
library(dcGOR)
install.packages("supraHex")
install.packages("dcGOR")
library(XML)
install.packages("XML")
library(XML)
doc <- readHTMLTable(
doc="https://www.wikidata.org/wiki/Wikidata:Administrators/Timeline")
install.packages("httr")
library(httr)
library(XML)
url <- "https://en.wikipedia.org/wiki/Upper_Peninsula_of_Michigan"
r <- GET(url)
doc <- readHTMLTable(
doc=content(r, "text"))
doc[6]
library(httr)
library(XML)
url <- "https://www.wikidata.org/wiki/Wikidata:Administrators/Timeline"
r <- GET(url)
doc <- readHTMLTable(
doc=content(r, "text"))
doc
doc[1]
currentAdmin <-  doc[1]
currentAdmin <-  as.data.frame(doc[1])
View(currentAdmin)
colnames(currentAdmin) <-  c('User', 'From', 'Until')
currentAdmin$User <- as.character(currentAdmin$User)
currentAdmin$From <- as.character(currentAdmin$From)
currentAdmin$Until <- as.character(currentAdmin$Until)
currentAdmin$Until[which(currentAdmin$Until == '-')] <- NA
View(currentAdmin)
currentAdmin$Until[which(currentAdmin$Until == '–')] <- NA
as.Date('8 November 2012')
as.Date(as.POSIXct('8 November 2012'))
as.Date('8 November 2012' ,format='%d %B /%Y')
as.Date(as.POSIXct('8 November 2012' ,format='%d %B /%Y'))
as.Date(as.POSIXct('8 November 2012' ,format='%d %B %Y'))
currentAdmin$From <-  as.Date(as.POSIXct(currentAdmin$From ,format='%d %B %Y'))
View(currentAdmin)
currentAdmin$Until <- gsub(' –', '', currentAdmin$Until)
?gsub
currentAdmin$Until <- gsub('29 December 201331 January 2016 -', '29 December 2013', currentAdmin$Until)
View(currentAdmin)
currentAdmin$From <- gsub('[ (talk • contribs • logs)]', '', currentAdmin$From)
write.csv(currentAdmin, row.names = F)
setwd('~/Documents/PhD/OntoHistory/')
setwd('~/Documents/PhD/WDOntoHistory/')
write.csv('WDAdmins.csv', currentAdmin, row.names = F)
write.csv('WDAdmins.csv', currentAdmin, row.names = F)
write.csv(currentAdmin, 'WDAdmins.csv',row.names = F)
pastAdmin <- as.data.frame(doc[2])
View(pastAdmin)
colnames(currentAdmin) <-  c('User', 'From', 'Until', 'Reason')
colnames(pastAdmin) <-  c('User', 'From', 'Until', 'Reason')
View(pastAdmin)
pastAdmin <- pastAdmin[,-4]
write.csv(pastAdmin, 'WDPastAdmins.csv',row.names = F)
pastAdmin <- read.csv('WDPastAdmins.csv')
pastAdmin <- read.csv('WDPastAdmins.csv', stringsAsFactors = F)
View(pastAdmin)
pastAdmin <- read.csv('WDPastAdmins.csv', stringsAsFactors = F)
pastAdmin$From <-  as.Date(as.POSIXct(pastAdmin$From ,format='%d %B %Y'))
pastAdmin$Until <-  as.Date(as.POSIXct(pastAdmin$Until ,format='%d %B %Y'))
View(pastAdmin)
write.csv(pastAdmin, 'WDPastAdmins.csv',row.names = F)
currentAdmin$From <-  as.Date(as.POSIXct(currentAdmin$From ,format='%d %B %Y'))
View(currentAdmin)
currentAdmin <-  as.data.frame(doc[1])
currentAdmin <- read.csv('WDAdmins.csv', stringsAsFactors = F)
View(currentAdmin)
currentAdmin$From <- as.Date(currentAdmin$From)
currentAdmin$Until <- as.Date(currentAdmin$Until)
View(currentAdmin)
write.csv(currentAdmin, 'WDAdmins.csv', row.names = F)
currentAdmin <- read.csv('WDAdmins.csv', stringsAsFactors = F)
View(currentAdmin)
propAdmin <-  read.csv('WDPropertyCreators.csv', stringsAsFactors = F)
propAdmin$From <-  as.Date(as.POSIXct(propAdmin$From ,format='%d %B %Y'))
propAdmin$Until <-  NA
write.csv(propAdmin, 'WDPropertyCreators.csv', row.names = F)
